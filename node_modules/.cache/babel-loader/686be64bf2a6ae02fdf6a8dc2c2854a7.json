{"ast":null,"code":"import _objectSpread from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client/src/pages/Home.js\";\nimport React, { useContext, useState, useEffect, useMutation } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid, Transition, Dropdown, Divider, Header, Icon } from 'semantic-ui-react';\nimport { AuthContext } from '../context/auth';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { FETCH_POSTS_QUERY, FETCH_AREA_QUERY, CREATE_AREA_POST_MUTATION } from '../util/graphql';\n\nfunction Home() {\n  const options = [{\n    key: '1',\n    text: '个人修养',\n    value: 'Self_improvement'\n  }, {\n    key: '2',\n    text: '人际关系',\n    value: 'Relationship'\n  }, {\n    key: '3',\n    text: '世界关系',\n    value: 'Wolrd'\n  }, {\n    key: '4',\n    text: '健康',\n    value: 'Health'\n  }, {\n    key: '5',\n    text: '成功',\n    value: 'Success'\n  }, {\n    key: '6',\n    text: '梦想',\n    value: 'Dream'\n  }, {\n    key: '7',\n    text: '改变世界',\n    value: 'Change_the_world'\n  }, {\n    key: '8',\n    text: '勇敢去做',\n    value: 'Brave_to_do'\n  }, {\n    key: '9',\n    text: 'Innovative Ideas',\n    value: 'Innovative Ideas'\n  }, {\n    key: '10',\n    text: '工作',\n    value: 'Job'\n  }, {\n    key: '11',\n    text: '开公司',\n    value: 'Company'\n  }, {\n    key: '12',\n    text: '干',\n    value: 'do'\n  }, {\n    key: '13',\n    text: '时间 Time',\n    value: 'Time'\n  }, {\n    key: '14',\n    text: '痛苦 Pain',\n    value: 'Pain'\n  }, {\n    key: '15',\n    text: '财富 Wealth',\n    value: 'Wealth'\n  }, {\n    key: '16',\n    text: '说话',\n    value: 'Speak'\n  }, {\n    key: '17',\n    text: '家庭',\n    value: 'Family'\n  }, {\n    key: '18',\n    text: '年轻',\n    value: 'Young'\n  }, {\n    key: '19',\n    text: '一念之差',\n    value: 'Danger_thought'\n  }, {\n    key: '20',\n    text: '借口',\n    value: 'Excuse'\n  }, {\n    key: '21',\n    text: '善与恶',\n    value: 'good_or_evil'\n  }, {\n    key: '22',\n    text: '对付坏人',\n    value: 'Enemy'\n  }, {\n    key: '23',\n    text: '正义 Justice',\n    value: 'Justice'\n  }, {\n    key: '24',\n    text: '纪念 Memory',\n    value: 'Memory'\n  }, {\n    key: '25',\n    text: '今天',\n    value: 'Today'\n  }, {\n    key: '26',\n    text: '计划 Plan',\n    value: 'Plan'\n  }, {\n    key: '27',\n    text: '科技革命',\n    value: 'Revolution'\n  }]; //const { values, onChange, onSubmit } = useForm(createPostCallback, {\n  //  body: ''\n  //});\n  //const [values, setValues] = useState('');\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        texts = _useState2[0],\n        setTexts = _useState2[1];\n\n  const _useState3 = useState('default'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        thoughtArea = _useState4[0],\n        setThoughtArea = _useState4[1]; //const [state,setState] = useState({options});\n\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        currentValues = _useState6[0],\n        setCurrentValues = _useState6[1];\n\n  const on_change_for_text = event => {\n    //setValues({ ...values, [event.target.name]: event.target.value });\n    setTexts(_objectSpread({}, texts, {\n      [event.target.name]: event.target.value\n    }));\n    console.log(\"=========for_input_text========\"); //console.log(event.target.name);\n    //console.log(event.target.value);\n    //console.log({ ...texts, [event.target.name]: event.target.value });\n    //console.log(texts);\n\n    setThoughtArea(_objectSpread({}, thoughtArea, {\n      [\"thoughtArea\"]: currentValues\n    }));\n    console.log(_objectSpread({}, thoughtArea, {\n      [\"thoughtArea\"]: currentValues\n    }));\n  };\n\n  const on_change_for_thought_area = (e, {\n    value\n  }) => {\n    //console.log(value);\n    setCurrentValues(value);\n  }; //  const onSubmit = (event) => {\n  //    event.preventDefault();\n  //console.log(\"=========1.0========\");\n  //    createPost();\n  //createPost3({\n  //  variables: {thoughtArea3},\n  //});\n  //  };\n\n  /*\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = '';\n    }\n  });\n  //*/\n  //  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION);\n\n\n  const _useMutation = useMutation(CREATE_AREA_POST_MUTATION, {\n    variables: {\n      body: texts.body,\n      thoughtArea: thoughtArea.thoughtArea\n    },\n\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_AREA_QUERY,\n        variables: {\n          thoughtArea: thoughtArea.thoughtArea\n        }\n      }); //console.log(\"=========1========\");\n      //console.log(data);\n\n      data.getAreaPosts = [result.data.createAreaPost, ...data.getAreaPosts]; //console.log(\"=========2========\");\n      //console.log(data);\n\n      proxy.writeQuery({\n        query: FETCH_AREA_QUERY,\n        variables: {\n          thoughtArea: thoughtArea.thoughtArea\n        },\n        data\n      });\n      texts.body = '';\n    }\n\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        createAreaPost = _useMutation2[0],\n        error = _useMutation2[1].error;\n\n  const submit = event => {\n    event.preventDefault(); //console.log(\"=========1.0.0========\");\n    //console.log(texts,thoughtArea);\n    //createPost3({\n    //  variables: {thoughtArea3},\n    //});\n    //addTodo({ variables: { type: input.value } });\n    //updateTodo({ variables: { id, type: input.value } });\n    //createAreaPost({ variables: { body: texts.body, thoughtArea: thoughtArea.thoughtArea } });\n\n    createAreaPost();\n  }; //  function createPostCallback() {\n  //console.log(\"=========1.0.1.1========\");\n  //    createPost();\n  //createPost3({\n  //  variables: {thoughtArea3},\n  //});\n  //  }\n  // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {\n    console.log(\"====useEffect1.0======\");\n    console.log(currentValues);\n  }); //const handleAddition = (e, { value }) => {\n  //  console.log(\"=========1.0==========\");   \n  //  console.log(value);\n  //setState((prevState) => ({\n  //  options: [{ text: value, value }, ...prevState.options],\n  //}))\n  //}\n  //////////////////////////////////////////////////////////\n\n  const _useContext = useContext(AuthContext),\n        user = _useContext.user;\n  /*\n  const {\n    loading,\n    data: { getPosts: posts } \n  } = useQuery(FETCH_POSTS_QUERY);\n  //*/\n\n\n  let thoughtArea_ = \"Self_improvement\";\n  useEffect(() => {\n    console.log(\"====useEffect0.1======\");\n    thoughtArea = \"Relationship\";\n    console.log(thoughtArea_);\n  });\n\n  const _useQuery = useQuery(FETCH_AREA_QUERY, {\n    variables: {\n      thoughtArea_\n    }\n  }),\n        loading = _useQuery.loading,\n        posts = _useQuery.data.getAreaPosts;\n\n  return React.createElement(Grid, {\n    columns: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, user && React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  })), loading ? React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"loading...\") : React.createElement(Transition.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    horizontal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"\\u6700\\u65B0\"))), posts && posts.map(post => React.createElement(Grid.Column, {\n    key: post.id,\n    style: {\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(PostCard, {\n    post: post,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }))))));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client/src/pages/Home.js"],"names":["React","useContext","useState","useEffect","useMutation","useQuery","Grid","Transition","Dropdown","Divider","Header","Icon","AuthContext","PostCard","PostForm","FETCH_POSTS_QUERY","FETCH_AREA_QUERY","CREATE_AREA_POST_MUTATION","Home","options","key","text","value","texts","setTexts","thoughtArea","setThoughtArea","currentValues","setCurrentValues","on_change_for_text","event","target","name","console","log","on_change_for_thought_area","e","variables","body","update","proxy","result","data","readQuery","query","getAreaPosts","createAreaPost","writeQuery","error","submit","preventDefault","user","thoughtArea_","loading","posts","map","post","id","marginBottom"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useMutation } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid, Transition,Dropdown, Divider, Header, Icon } from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { FETCH_POSTS_QUERY, FETCH_AREA_QUERY, CREATE_AREA_POST_MUTATION } from '../util/graphql';\n\n\nfunction Home() {\n\n\n\nconst options = [\n  { key: '1', text: '个人修养', value: 'Self_improvement' },\n  { key: '2', text: '人际关系', value: 'Relationship' },\n  { key: '3', text: '世界关系', value: 'Wolrd' },\n  { key: '4', text: '健康', value: 'Health' },\n  { key: '5', text: '成功', value: 'Success' },\n  { key: '6', text: '梦想', value: 'Dream' },\n  { key: '7', text: '改变世界', value: 'Change_the_world' },\n  { key: '8', text: '勇敢去做', value: 'Brave_to_do' },\n  { key: '9', text: 'Innovative Ideas', value: 'Innovative Ideas' },\n  { key: '10', text: '工作', value: 'Job' },\n  { key: '11', text: '开公司', value: 'Company' },\n  { key: '12', text: '干', value: 'do' },\n  { key: '13', text: '时间 Time', value: 'Time' },\n  { key: '14', text: '痛苦 Pain', value: 'Pain' },\n  { key: '15', text: '财富 Wealth', value: 'Wealth' },\n  { key: '16', text: '说话', value: 'Speak' },\n  { key: '17', text: '家庭', value: 'Family' },\n  { key: '18', text: '年轻', value: 'Young' },\n  { key: '19', text: '一念之差', value: 'Danger_thought' },\n  { key: '20', text: '借口', value: 'Excuse' },\n  { key: '21', text: '善与恶', value: 'good_or_evil' },\n  { key: '22', text: '对付坏人', value: 'Enemy' },\n  { key: '23', text: '正义 Justice', value: 'Justice' },\n  { key: '24', text: '纪念 Memory', value: 'Memory' },\n  { key: '25', text: '今天', value: 'Today' },\n  { key: '26', text: '计划 Plan', value: 'Plan' },\n  { key: '27', text: '科技革命', value: 'Revolution' },\n]\n\n\n  \n  //const { values, onChange, onSubmit } = useForm(createPostCallback, {\n  //  body: ''\n  //});\n\n  //const [values, setValues] = useState('');\n  const [texts, setTexts] = useState('');\n  const [thoughtArea, setThoughtArea] = useState('default');\n  //const [state,setState] = useState({options});\n  const [currentValues,setCurrentValues] = useState([]);\n\n  const on_change_for_text = (event) => {\n    //setValues({ ...values, [event.target.name]: event.target.value });\n    setTexts({ ...texts, [event.target.name]: event.target.value });\n    console.log(\"=========for_input_text========\");\n    //console.log(event.target.name);\n    //console.log(event.target.value);\n    //console.log({ ...texts, [event.target.name]: event.target.value });\n    //console.log(texts);\n\n    setThoughtArea({ ...thoughtArea, [\"thoughtArea\"]: currentValues });\n    console.log({ ...thoughtArea, [\"thoughtArea\"]: currentValues });\n  };\n\n  const on_change_for_thought_area = (e, { value }) => \n  {\n    //console.log(value);\n    setCurrentValues(value)\n  };\n\n//  const onSubmit = (event) => {\n//    event.preventDefault();\n    //console.log(\"=========1.0========\");\n//    createPost();\n    //createPost3({\n    //  variables: {thoughtArea3},\n    //});\n//  };\n\n  /*\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = '';\n    }\n  });\n//*/\n\n//  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION);\n\n\n  const [createAreaPost, { error }] = useMutation(CREATE_AREA_POST_MUTATION,{\n    variables: { body: texts.body, thoughtArea: thoughtArea.thoughtArea },\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_AREA_QUERY,\n        variables:{ thoughtArea : thoughtArea.thoughtArea}\n      });\n      //console.log(\"=========1========\");\n      //console.log(data);\n      data.getAreaPosts = [result.data.createAreaPost, ...data.getAreaPosts];\n      //console.log(\"=========2========\");\n      //console.log(data);\n      proxy.writeQuery({ \n        query: FETCH_AREA_QUERY, \n        variables:{ thoughtArea : thoughtArea.thoughtArea}, \n        data \n      });\n      texts.body = '';\n    }\n  });\n\n  const submit = (event) => {\n\n    event.preventDefault();\n    //console.log(\"=========1.0.0========\");\n    //console.log(texts,thoughtArea);\n    //createPost3({\n    //  variables: {thoughtArea3},\n    //});\n    //addTodo({ variables: { type: input.value } });\n    //updateTodo({ variables: { id, type: input.value } });\n    //createAreaPost({ variables: { body: texts.body, thoughtArea: thoughtArea.thoughtArea } });\n    createAreaPost();\n\n  };\n\n//  function createPostCallback() {\n    //console.log(\"=========1.0.1.1========\");\n//    createPost();\n    //createPost3({\n    //  variables: {thoughtArea3},\n    //});\n//  }\n\n\n\n    // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n      console.log(\"====useEffect1.0======\");\n      console.log(currentValues);\n  });\n\n\n  //const handleAddition = (e, { value }) => {\n\n  //  console.log(\"=========1.0==========\");   \n  //  console.log(value);\n    //setState((prevState) => ({\n    //  options: [{ text: value, value }, ...prevState.options],\n    //}))\n  //}\n\n\n\n\n  //////////////////////////////////////////////////////////\n  const { user } = useContext(AuthContext);\n\n  /*\n  const {\n    loading,\n    data: { getPosts: posts } \n  } = useQuery(FETCH_POSTS_QUERY);\n  //*/\n\n  let thoughtArea_ = \"Self_improvement\";\n\n  useEffect(() => {\n      console.log(\"====useEffect0.1======\");\n      thoughtArea = \"Relationship\"\n      console.log(thoughtArea_);\n  });\n\n\n  const {\n    loading,\n    data: { getAreaPosts: posts } \n  } = useQuery(FETCH_AREA_QUERY,\n    {\n      variables: {\n        thoughtArea_\n    },\n  }\n  );\n\n  return (\n    <Grid columns={1}>\n      <Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n        {loading ? (\n          <h1>loading...</h1>\n        ) : (\n          <Transition.Group>\n            <Grid.Column>\n              <Divider horizontal><h3>最新</h3></Divider>\n            </Grid.Column>\n            {posts &&\n              posts.map((post) => (\n                <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                  <PostCard post={post} />\n                </Grid.Column>\n              ))}\n          </Transition.Group>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}