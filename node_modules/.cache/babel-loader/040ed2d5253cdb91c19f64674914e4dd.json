{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client/src/pages/profile.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation login($username: String!, $password: String!) {\\n    login(username: $username, password: $password) {\\n      id\\n      email\\n      username\\n      createdAt\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport { Button, Card, Form, Grid, Image, Icon, Label, Menu, Segment } from 'semantic-ui-react';\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction Profile(props) {\n  const postId = props.match.params.postId;\n\n  const _useContext = useContext(AuthContext),\n        user = _useContext.user;\n\n  const commentInputRef = useRef(null);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        comment = _useState2[0],\n        setComment = _useState2[1];\n\n  const _useQuery = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  }),\n        getPost = _useQuery.data.getPost;\n\n  const _useMutation = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n\n    variables: {\n      postId,\n      body: comment\n    }\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        submitComment = _useMutation2[0];\n\n  function deletePostCallback() {\n    props.history.push('/');\n  } ///////////////////////////////////////////////////////////////\n\n\n  const _useState3 = useState({\n    activeItem: 'home'\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        state = _useState4[0],\n        setState = _useState4[1]; //const state = { activeItem: 'home' }\n\n\n  const handleItemClick = (e, {\n    name\n  }) => setState({\n    activeItem: name\n  });\n\n  const context = useContext(AuthContext);\n\n  const _useState5 = useState({}),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errors = _useState6[0],\n        setErrors = _useState6[1];\n\n  const _useForm = useForm(loginUserCallback, {\n    username: '',\n    password: ''\n  }),\n        onChange = _useForm.onChange,\n        onSubmit = _useForm.onSubmit,\n        values = _useForm.values;\n\n  const _useMutation3 = useMutation(LOGIN_USER, {\n    update(_, {\n      data: {\n        login: userData\n      }\n    }) {\n      context.login(userData);\n      props.history.push('/');\n    },\n\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: values\n  }),\n        _useMutation4 = _slicedToArray(_useMutation3, 2),\n        loginUser = _useMutation4[0],\n        loading = _useMutation4[1].loading;\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  const activeItem = state.activeItem;\n  let postMarkup;\n\n  if (!getPost) {\n    postMarkup = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Loading post..\");\n  } else {\n    const id = getPost.id,\n          body = getPost.body,\n          createdAt = getPost.createdAt,\n          username = getPost.username,\n          comments = getPost.comments,\n          likes = getPost.likes,\n          likeCount = getPost.likeCount,\n          commentCount = getPost.commentCount;\n    postMarkup = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      centered: true,\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      inverted: true,\n      vertical: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Menu.Item, {\n      name: \"home\",\n      active: activeItem === 'home',\n      onClick: handleItemClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Menu.Item, {\n      name: \"messages\",\n      active: activeItem === 'messages',\n      onClick: handleItemClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(Menu.Item, {\n      name: \"friends\",\n      active: activeItem === 'friends',\n      onClick: handleItemClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      centered: true,\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: \"https://react.semantic-ui.com/images/avatar/large/daniel.jpg\",\n      wrapped: true,\n      ui: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Daniel\"), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Joined in 2016\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Daniel is a comedian living in Nashville.\")), React.createElement(Card.Content, {\n      extra: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), \"10 Friends\"))))));\n  }\n\n  return postMarkup;\n}\n\nconst LOGIN_USER = gql(_templateObject());\nexport default Profile;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client/src/pages/profile.js"],"names":["React","useContext","useState","useRef","gql","useQuery","useMutation","moment","Button","Card","Form","Grid","Image","Icon","Label","Menu","Segment","AuthContext","useForm","LikeButton","DeleteButton","MyPopup","Profile","props","postId","match","params","user","commentInputRef","comment","setComment","FETCH_POST_QUERY","variables","getPost","data","SUBMIT_COMMENT_MUTATION","update","current","blur","body","submitComment","deletePostCallback","history","push","activeItem","state","setState","handleItemClick","e","name","context","errors","setErrors","loginUserCallback","username","password","onChange","onSubmit","values","LOGIN_USER","_","login","userData","onError","err","graphQLErrors","extensions","exception","loginUser","loading","postMarkup","id","createdAt","comments","likes","likeCount","commentCount"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,MAAtC,QAAoD,OAApD;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,KALF,EAMEC,IANF,EAOEC,KAPF,EAQEC,IARF,EASEC,OATF,QAUO,mBAVP;AAYA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,OAAP,MAAoB,iBAApB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAEtB,QAAMC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,MAAlC;;AAFsB,sBAGLvB,UAAU,CAACgB,WAAD,CAHL;AAAA,QAGdU,IAHc,eAGdA,IAHc;;AAItB,QAAMC,eAAe,GAAGzB,MAAM,CAAC,IAAD,CAA9B;;AAJsB,oBAMQD,QAAQ,CAAC,EAAD,CANhB;AAAA;AAAA,QAMf2B,OANe;AAAA,QAMNC,UANM;;AAAA,oBAUlBzB,QAAQ,CAAC0B,gBAAD,EAAmB;AAC7BC,IAAAA,SAAS,EAAE;AACTR,MAAAA;AADS;AADkB,GAAnB,CAVU;AAAA,QASZS,OATY,aASpBC,IAToB,CASZD,OATY;;AAAA,uBAgBE3B,WAAW,CAAC6B,uBAAD,EAA0B;AAC3DC,IAAAA,MAAM,GAAG;AACPN,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAF,MAAAA,eAAe,CAACS,OAAhB,CAAwBC,IAAxB;AACD,KAJ0D;;AAK3DN,IAAAA,SAAS,EAAE;AACTR,MAAAA,MADS;AAETe,MAAAA,IAAI,EAAEV;AAFG;AALgD,GAA1B,CAhBb;AAAA;AAAA,QAgBfW,aAhBe;;AA2BtB,WAASC,kBAAT,GAA8B;AAC5BlB,IAAAA,KAAK,CAACmB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,GA7BqB,CAmCtB;;;AAnCsB,qBAqCIzC,QAAQ,CAAC;AAAE0C,IAAAA,UAAU,EAAE;AAAd,GAAD,CArCZ;AAAA;AAAA,QAqCfC,KArCe;AAAA,QAqCRC,QArCQ,kBAuCtB;;;AAEA,QAAMC,eAAe,GAAG,CAACC,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAiBH,QAAQ,CAAC;AAAEF,IAAAA,UAAU,EAAEK;AAAd,GAAD,CAAjD;;AAEA,QAAMC,OAAO,GAAGjD,UAAU,CAACgB,WAAD,CAA1B;;AA3CsB,qBA4CMf,QAAQ,CAAC,EAAD,CA5Cd;AAAA;AAAA,QA4CfiD,MA5Ce;AAAA,QA4CPC,SA5CO;;AAAA,mBA8CiBlC,OAAO,CAACmC,iBAAD,EAAoB;AAChEC,IAAAA,QAAQ,EAAE,EADsD;AAEhEC,IAAAA,QAAQ,EAAE;AAFsD,GAApB,CA9CxB;AAAA,QA8CdC,QA9Cc,YA8CdA,QA9Cc;AAAA,QA8CJC,QA9CI,YA8CJA,QA9CI;AAAA,QA8CMC,MA9CN,YA8CMA,MA9CN;;AAAA,wBAmDWpD,WAAW,CAACqD,UAAD,EAAa;AACvDvB,IAAAA,MAAM,CACJwB,CADI,EAEJ;AACE1B,MAAAA,IAAI,EAAE;AAAE2B,QAAAA,KAAK,EAAEC;AAAT;AADR,KAFI,EAKJ;AACAZ,MAAAA,OAAO,CAACW,KAAR,CAAcC,QAAd;AACAvC,MAAAA,KAAK,CAACmB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,KATsD;;AAUvDoB,IAAAA,OAAO,CAACC,GAAD,EAAM;AACXZ,MAAAA,SAAS,CAACY,GAAG,CAACC,aAAJ,CAAkB,CAAlB,EAAqBC,UAArB,CAAgCC,SAAhC,CAA0ChB,MAA3C,CAAT;AACD,KAZsD;;AAavDnB,IAAAA,SAAS,EAAE0B;AAb4C,GAAb,CAnDtB;AAAA;AAAA,QAmDfU,SAnDe;AAAA,QAmDFC,OAnDE,oBAmDFA,OAnDE;;AAmEtB,WAAShB,iBAAT,GAA6B;AAC3Be,IAAAA,SAAS;AACV;;AArEqB,QAwEdxB,UAxEc,GAwECC,KAxED,CAwEdD,UAxEc;AA0EtB,MAAI0B,UAAJ;;AACA,MAAI,CAACrC,OAAL,EACA;AACEqC,IAAAA,UAAU,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAb;AACD,GAHD,MAKA;AAAA,UAEIC,EAFJ,GAUMtC,OAVN,CAEIsC,EAFJ;AAAA,UAGIhC,IAHJ,GAUMN,OAVN,CAGIM,IAHJ;AAAA,UAIIiC,SAJJ,GAUMvC,OAVN,CAIIuC,SAJJ;AAAA,UAKIlB,QALJ,GAUMrB,OAVN,CAKIqB,QALJ;AAAA,UAMImB,QANJ,GAUMxC,OAVN,CAMIwC,QANJ;AAAA,UAOIC,KAPJ,GAUMzC,OAVN,CAOIyC,KAPJ;AAAA,UAQIC,SARJ,GAUM1C,OAVN,CAQI0C,SARJ;AAAA,UASIC,YATJ,GAUM3C,OAVN,CASI2C,YATJ;AAYEN,IAAAA,UAAU,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,QAAQ,MAAd;AAAe,MAAA,OAAO,EAAE,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,QAAQ,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,IAAN;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,MAAM,EAAE1B,UAAU,KAAK,MAFzB;AAGE,MAAA,OAAO,EAAEG,eAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,oBAAC,IAAD,CAAM,IAAN;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,MAAM,EAAEH,UAAU,KAAK,UAFzB;AAGE,MAAA,OAAO,EAAEG,eAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAWE,oBAAC,IAAD,CAAM,IAAN;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,MAAM,EAAEH,UAAU,KAAK,SAFzB;AAGE,MAAA,OAAO,EAAEG,eAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADJ,CADF,EAoBE,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,QAAQ,MAArB;AAAsB,MAAA,KAAK,EAAE,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,8DAAX;AAA0E,MAAA,OAAO,MAAjF;AAAkF,MAAA,EAAE,EAAE,KAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,EAGE,oBAAC,IAAD,CAAM,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAHF,CAFF,EASE,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,KAAK,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eADF,CATF,CADF,CApBF,CADF,CADF;AA2CD;;AACD,SAAOuB,UAAP;AAED;;AAED,MAAMX,UAAU,GAAGvD,GAAH,mBAAhB;AAYA,eAAekB,OAAf","sourcesContent":["import React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label,\n  Menu, \n  Segment\n} from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction Profile(props) {\n\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n\n  const [comment, setComment] = useState('');\n\n  const {\n    data: { getPost }\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment\n    }\n  });\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n\n\n\n\n  ///////////////////////////////////////////////////////////////\n\n  const [state, setState] = useState({ activeItem: 'home' });\n\n  //const state = { activeItem: 'home' }\n\n  const handleItemClick = (e, { name }) => setState({ activeItem: name })\n\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n    username: '',\n    password: ''\n  });\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(\n      _,\n      {\n        data: { login: userData }   \n      }\n    ) {\n      context.login(userData);\n      props.history.push('/');\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n\n  const { activeItem } = state\n\n  let postMarkup;\n  if (!getPost)\n  {\n    postMarkup = <p>Loading post..</p>;\n  }\n  else \n  {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount\n    } = getPost;\n\n    postMarkup = (\n      <div>\n        <Grid centered columns={2}>\n          <Grid.Column width={4}>\n              <Menu inverted vertical>\n                <Menu.Item\n                  name='home'\n                  active={activeItem === 'home'}\n                  onClick={handleItemClick}\n                />\n                <Menu.Item\n                  name='messages'\n                  active={activeItem === 'messages'}\n                  onClick={handleItemClick}\n                />\n                <Menu.Item\n                  name='friends'\n                  active={activeItem === 'friends'}\n                  onClick={handleItemClick}\n                />\n              </Menu>\n          </Grid.Column>\n          <Grid.Column centered width={10}>\n            <Card>\n              <Image src='https://react.semantic-ui.com/images/avatar/large/daniel.jpg' wrapped ui={false} />\n              <Card.Content>\n                <Card.Header>Daniel</Card.Header>\n                <Card.Meta>Joined in 2016</Card.Meta>\n                <Card.Description>\n                  Daniel is a comedian living in Nashville.\n                </Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <a>\n                  <Icon name='user' />\n                  10 Friends\n                </a>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n  return postMarkup;\n\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}