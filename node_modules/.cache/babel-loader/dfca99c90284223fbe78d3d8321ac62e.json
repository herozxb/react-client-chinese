{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client/src/components/PostForm.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation createPost($body: String!) {\\n    createPost(body: $body) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likes {\\n        id\\n        username\\n        createdAt\\n      }\\n      likeCount\\n      comments {\\n        id\\n        body\\n        username\\n        createdAt\\n      }\\n      commentCount\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction PostForm() {\n  const _useForm = useForm(createPostCallback, {\n    body: ''\n  }),\n        values = _useForm.values,\n        onChange = _useForm.onChange,\n        onSubmit = _useForm.onSubmit;\n\n  const _useMutation = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data\n      });\n      values.body = '';\n    }\n\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        createPost = _useMutation2[0],\n        error = _useMutation2[1].error;\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Form, {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"\\u53D1\\u5E03\\u535A\\u6587:\"), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Form.Input, {\n    placeholder: \"Hi World!\",\n    name: \"body\",\n    onChange: onChange,\n    value: values.body,\n    error: error ? true : false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    color: \"teal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Submit\"))), error && React.createElement(\"div\", {\n    className: \"ui error message\",\n    style: {\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, error.graphQLErrors[0].message))));\n}\n\nconst CREATE_POST_MUTATION = gql(_templateObject());\nexport default PostForm;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client/src/components/PostForm.js"],"names":["React","Button","Form","gql","useMutation","useForm","FETCH_POSTS_QUERY","PostForm","createPostCallback","body","values","onChange","onSubmit","CREATE_POST_MUTATION","variables","update","proxy","result","data","readQuery","query","getPosts","createPost","writeQuery","error","marginBottom","graphQLErrors","message"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AAEA,SAASC,QAAT,GAAoB;AAAA,mBACqBF,OAAO,CAACG,kBAAD,EAAqB;AACjEC,IAAAA,IAAI,EAAE;AAD2D,GAArB,CAD5B;AAAA,QACVC,MADU,YACVA,MADU;AAAA,QACFC,QADE,YACFA,QADE;AAAA,QACQC,QADR,YACQA,QADR;;AAAA,uBAKcR,WAAW,CAACS,oBAAD,EAAuB;AAChEC,IAAAA,SAAS,EAAEJ,MADqD;;AAEhEK,IAAAA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACpB,YAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAC3BC,QAAAA,KAAK,EAAEd;AADoB,OAAhB,CAAb;AAGAY,MAAAA,IAAI,CAACG,QAAL,GAAgB,CAACJ,MAAM,CAACC,IAAP,CAAYI,UAAb,EAAyB,GAAGJ,IAAI,CAACG,QAAjC,CAAhB;AACAL,MAAAA,KAAK,CAACO,UAAN,CAAiB;AAAEH,QAAAA,KAAK,EAAEd,iBAAT;AAA4BY,QAAAA;AAA5B,OAAjB;AACAR,MAAAA,MAAM,CAACD,IAAP,GAAc,EAAd;AACD;;AAT+D,GAAvB,CALzB;AAAA;AAAA,QAKXa,UALW;AAAA,QAKGE,KALH,oBAKGA,KALH;;AAiBlB,WAAShB,kBAAT,GAA8B;AAC5Bc,IAAAA,UAAU;AACX;;AAED,SACE,0CACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEV,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,WAAW,EAAC,WADd;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,QAAQ,EAAED,QAHZ;AAIE,IAAA,KAAK,EAAED,MAAM,CAACD,IAJhB;AAKE,IAAA,KAAK,EAAEe,KAAK,GAAG,IAAH,GAAU,KALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,KAAK,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,CAFF,CADF,EAgBGA,KAAK,IACJ;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAK,CAACE,aAAN,CAAoB,CAApB,EAAuBC,OAA5B,CADF,CADF,CAjBJ,CADF;AA0BD;;AAED,MAAMd,oBAAoB,GAAGV,GAAH,mBAA1B;AAwBA,eAAeI,QAAf","sourcesContent":["import React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction PostForm() {\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\n    body: ''\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = '';\n    }\n  });\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return (\n    <>\n      <Form onSubmit={onSubmit}>\n        <h2>发布博文:</h2>\n        <Form.Field>\n          <Form.Input\n            placeholder=\"Hi World!\"\n            name=\"body\"\n            onChange={onChange}\n            value={values.body}\n            error={error ? true : false}\n          />\n          <Button type=\"submit\" color=\"teal\">\n            Submit\n          </Button>\n        </Form.Field>\n      </Form>\n      {error && (\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\n          <ul className=\"list\">\n            <li>{error.graphQLErrors[0].message}</li>\n          </ul>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id\n      body\n      createdAt\n      username\n      likes {\n        id\n        username\n        createdAt\n      }\n      likeCount\n      comments {\n        id\n        body\n        username\n        createdAt\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}