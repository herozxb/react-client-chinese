{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client/src/pages/profile.js\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    getPosts {\\n      id\\n      body\\n      createdAt\\n      username\\n      likeCount\\n      likes {\\n        username\\n      }\\n      commentCount\\n      comments {\\n        id\\n        username\\n        createdAt\\n        body\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  query($postId: ID!) {\\n    getPost(postId: $postId) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likeCount\\n      likes {\\n        username\\n      }\\n      commentCount\\n      comments {\\n        id\\n        username\\n        createdAt\\n        body\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation($postId: String!, $body: String!) {\\n    createComment(postId: $postId, body: $body) {\\n      id\\n      comments {\\n        id\\n        body\\n        createdAt\\n        username\\n      }\\n      commentCount\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation login($username: String!, $password: String!) {\\n    login(username: $username, password: $password) {\\n      id\\n      email\\n      username\\n      createdAt\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport { Button, Card, Form, Grid, Image, Icon, Label, Menu, Segment } from 'semantic-ui-react';\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction Profile(props) {\n  const context = useContext(AuthContext);\n  let postId = null;\n  console.log(\"=======1.0======\");\n\n  if (context.user === null) {\n    console.log(\"No user\");\n    postId = \"5fe723cc2dd0c558e547ea89\";\n    console.log(postId);\n  } else {\n    console.log(\"=======1.0.1.1=====\");\n    console.log(context.user.id);\n    postId = context.user.id;\n    console.log(postId);\n  }\n\n  console.log(\"=======1.0.1=====\");\n\n  const _useContext = useContext(AuthContext),\n        user = _useContext.user;\n\n  const commentInputRef = useRef(null);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        comment = _useState2[0],\n        setComment = _useState2[1];\n\n  const _useQuery = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  }),\n        getPost = _useQuery.data.getPost;\n\n  const _useMutation = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n\n    variables: {\n      postId,\n      body: comment\n    }\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        submitComment = _useMutation2[0];\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let postMarkup;\n\n  if (!getPost) {\n    postMarkup = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Loading post..\");\n  } else {\n    const id = getPost.id,\n          body = getPost.body,\n          createdAt = getPost.createdAt,\n          username = getPost.username,\n          comments = getPost.comments,\n          likes = getPost.likes,\n          likeCount = getPost.likeCount,\n          commentCount = getPost.commentCount;\n    postMarkup = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      centered: true,\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      centered: true,\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: \"https://react.semantic-ui.com/images/avatar/large/daniel.jpg\",\n      wrapped: true,\n      ui: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Daniel\"), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Joined in 2016\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Daniel is a comedian living in Nashville.\")), React.createElement(Card.Content, {\n      extra: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), \"10 Friends\"))))));\n  }\n\n  return postMarkup;\n}\n\nconst LOGIN_USER = gql(_templateObject());\nconst SUBMIT_COMMENT_MUTATION = gql(_templateObject2());\nconst FETCH_POST_QUERY = gql(_templateObject3());\nexport const FETCH_ID_QUERY = gql(_templateObject4());\nexport default Profile;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client/src/pages/profile.js"],"names":["React","useContext","useState","useRef","gql","useQuery","useMutation","moment","Button","Card","Form","Grid","Image","Icon","Label","Menu","Segment","AuthContext","useForm","LikeButton","DeleteButton","MyPopup","Profile","props","context","postId","console","log","user","id","commentInputRef","comment","setComment","FETCH_POST_QUERY","variables","getPost","data","SUBMIT_COMMENT_MUTATION","update","current","blur","body","submitComment","deletePostCallback","history","push","postMarkup","createdAt","username","comments","likes","likeCount","commentCount","LOGIN_USER","FETCH_ID_QUERY"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label,\n  Menu, \n  Segment\n} from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction Profile(props) {\n\n  const context = useContext(AuthContext);\n  let postId = null\n  console.log(\"=======1.0======\");\n  if (context.user===null)\n  {\n      console.log(\"No user\");\n      postId = \"5fe723cc2dd0c558e547ea89\";\n      console.log(postId);\n  }\n  else\n  {\n    console.log(\"=======1.0.1.1=====\");\n    console.log(context.user.id);\n    postId = context.user.id;\n    console.log(postId); \n  }\n  console.log(\"=======1.0.1=====\");\n \n\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n\n  const [comment, setComment] = useState('');\n\n  const {\n    data: { getPost }\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment\n    }\n  });\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n\n\n\n  let postMarkup;\n  if (!getPost)\n  {\n    postMarkup = <p>Loading post..</p>;\n  }\n  else \n  {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount\n    } = getPost;\n\n    postMarkup = (\n      <div>\n        <Grid centered columns={2}>\n          <Grid.Column centered width={10}>\n            <Card>\n              <Image src='https://react.semantic-ui.com/images/avatar/large/daniel.jpg' wrapped ui={false} />\n              <Card.Content>\n                <Card.Header>Daniel</Card.Header>\n                <Card.Meta>Joined in 2016</Card.Meta>\n                <Card.Description>\n                  Daniel is a comedian living in Nashville.\n                </Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <a>\n                  <Icon name='user' />\n                  10 Friends\n                </a>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n  return postMarkup;\n\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport const FETCH_ID_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}