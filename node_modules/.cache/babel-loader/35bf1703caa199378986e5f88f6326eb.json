{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client/src/pages/SinglePost.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query($postId: ID!) {\\n    getPost(postId: $postId) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likeCount\\n      likes {\\n        username\\n      }\\n      commentCount\\n      comments {\\n        id\\n        username\\n        createdAt\\n        body\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation($postId: String!, $body: String!) {\\n    createComment(postId: $postId, body: $body) {\\n      id\\n      comments {\\n        id\\n        body\\n        createdAt\\n        username\\n      }\\n      commentCount\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport { Button, Card, Form, Grid, Image, Icon, Label } from 'semantic-ui-react';\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId; //console.log(\"====1======\")\n  //console.log(postId)\n\n  const _useContext = useContext(AuthContext),\n        user = _useContext.user;\n\n  const commentInputRef = useRef(null);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        comment = _useState2[0],\n        setComment = _useState2[1];\n\n  const _useQuery = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  }),\n        getPost = _useQuery.data.getPost;\n\n  const _useMutation = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n\n    variables: {\n      postId,\n      body: comment\n    }\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        submitComment = _useMutation2[0];\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let postMarkup;\n\n  if (!getPost) {\n    postMarkup = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Loading post..\");\n  } else {\n    const id = getPost.id,\n          body = getPost.body,\n          createdAt = getPost.createdAt,\n          username = getPost.username,\n          comments = getPost.comments,\n          likes = getPost.likes,\n          likeCount = getPost.likeCount,\n          commentCount = getPost.commentCount;\n    postMarkup = React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: \"https://react.semantic-ui.com/images/avatar/large/molly.png\",\n      size: \"small\",\n      float: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Card, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, username), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, moment(createdAt).fromNow()), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, body)), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Card.Content, {\n      extra: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(LikeButton, {\n      user: user,\n      post: {\n        id,\n        likeCount,\n        likes\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(MyPopup, {\n      content: \"Comment on post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Button, {\n      as: \"div\",\n      labelPosition: \"right\",\n      onClick: () => console.log('Comment on post'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Button, {\n      basic: true,\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(Label, {\n      basic: true,\n      color: \"blue\",\n      pointing: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, commentCount))), user && user.username === username && React.createElement(DeleteButton, {\n      postId: id,\n      callback: deletePostCallback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }))), user && React.createElement(Card, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Post a comment\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ui action input fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Comment..\",\n      name: \"comment\",\n      value: comment,\n      onChange: event => setComment(event.target.value),\n      ref: commentInputRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"ui button blue\",\n      disabled: comment.trim() === '',\n      onClick: submitComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Submit\"))))), comments.map(comment => React.createElement(Card, {\n      fluid: true,\n      key: comment.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, user && user.username === comment.username && React.createElement(DeleteButton, {\n      postId: id,\n      commentId: comment.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, comment.username), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, moment(comment.createdAt).fromNow()), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, comment.body)))))));\n  }\n\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql(_templateObject());\nconst FETCH_POST_QUERY = gql(_templateObject2());\nexport default SinglePost;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client/src/pages/SinglePost.js"],"names":["React","useContext","useState","useRef","gql","useQuery","useMutation","moment","Button","Card","Form","Grid","Image","Icon","Label","AuthContext","LikeButton","DeleteButton","MyPopup","SinglePost","props","postId","match","params","user","commentInputRef","comment","setComment","FETCH_POST_QUERY","variables","getPost","data","SUBMIT_COMMENT_MUTATION","update","current","blur","body","submitComment","deletePostCallback","history","push","postMarkup","id","createdAt","username","comments","likes","likeCount","commentCount","fromNow","console","log","event","target","value","trim","map"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label\n} from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport MyPopup from '../util/MyPopup';\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId;\n  //console.log(\"====1======\")\n  //console.log(postId)\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n\n  const [comment, setComment] = useState('');\n\n  const {\n    data: { getPost }\n  } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId\n    }\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment\n    }\n  });\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let postMarkup;\n  if (!getPost) {\n    postMarkup = <p>Loading post..</p>;\n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount\n    } = getPost;\n\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Image\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n              size=\"small\"\n              float=\"right\"\n            />\n          </Grid.Column>\n          <Grid.Column width={10}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\n                <MyPopup content=\"Comment on post\">\n                  <Button\n                    as=\"div\"\n                    labelPosition=\"right\"\n                    onClick={() => console.log('Comment on post')}\n                  >\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {commentCount}\n                    </Label>\n                  </Button>\n                </MyPopup>\n                {user && user.username === username && (\n                  <DeleteButton postId={id} callback={deletePostCallback} />\n                )}\n              </Card.Content>\n            </Card>\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <p>Post a comment</p>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Comment..\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={(event) => setComment(event.target.value)}\n                        ref={commentInputRef}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"ui button blue\"\n                        disabled={comment.trim() === ''}\n                        onClick={submitComment}\n                      >\n                        Submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n            {comments.map((comment) => (\n              <Card fluid key={comment.id}>\n                <Card.Content>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={id} commentId={comment.id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n"]},"metadata":{},"sourceType":"module"}