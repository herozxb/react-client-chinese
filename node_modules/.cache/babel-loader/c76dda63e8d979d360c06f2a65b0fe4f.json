{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client/src/pages/profile.js\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  query($username: String!) {\\n    getUserPosts(username: $username) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likeCount\\n      likes {\\n        username\\n      }\\n      commentCount\\n      comments {\\n        id\\n        username\\n        createdAt\\n        body\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  query($postId: ID!) {\\n    getPost(postId: $postId) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likeCount\\n      likes {\\n        username\\n      }\\n      commentCount\\n      comments {\\n        id\\n        username\\n        createdAt\\n        body\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation($postId: String!, $body: String!) {\\n    createComment(postId: $postId, body: $body) {\\n      id\\n      comments {\\n        id\\n        body\\n        createdAt\\n        username\\n      }\\n      commentCount\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation login($username: String!, $password: String!) {\\n    login(username: $username, password: $password) {\\n      id\\n      email\\n      username\\n      createdAt\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport { Button, Card, Form, Grid, Image, Icon, Label, Menu, Segment, Transition } from 'semantic-ui-react';\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport MyPopup from '../util/MyPopup';\n\nfunction Profile(props) {\n  const context = useContext(AuthContext);\n  /*\n  let postId = null\n  console.log(\"=======1.0======\");\n  if (context.user===null)\n  {\n      console.log(\"No user\");\n      //postId = \"5fe723cc2dd0c558e547ea89\";\n      //postId = \"5fdf32d0d064dd1689ac3b8c\";\n       postId = \"5fe40df82dd0c558e547ea88\";      \n      //post id is postid, but it is not the user id\n      console.log(postId);\n  }\n  else\n  {\n    console.log(\"=======1.0.1.1=====\");\n    console.log(context.user.id);\n    postId = context.user.id;\n    username = context.user.username;\n    console.log(username); \n  }\n  console.log(\"=======1.0.1=====\");\n   //*/\n\n  const username = context.user.username;\n\n  const _useQuery = useQuery(FETCH_USER_QUERY, {\n    variables: {\n      username\n    }\n  }, {\n    fetchPolicy: !username ? \"store-only\" : \"store-or-network\"\n  }),\n        loading = _useQuery.loading,\n        posts = _useQuery.data.getUserPosts;\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let postMarkup;\n\n  if (!posts) {\n    postMarkup = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Loading post..\");\n  } else {\n    const id = posts.id,\n          body = posts.body,\n          createdAt = posts.createdAt,\n          username = posts.username,\n          comments = posts.comments,\n          likes = posts.likes,\n          likeCount = posts.likeCount,\n          commentCount = posts.commentCount;\n    postMarkup = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, username ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"You are not logged in...\") : React.createElement(Grid, {\n      centered: true,\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      centered: true,\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: \"https://react.semantic-ui.com/images/avatar/large/daniel.jpg\",\n      wrapped: true,\n      ui: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Daniel\"), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Joined in 2016\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Daniel is a comedian living in Nashville.\")), React.createElement(Card.Content, {\n      extra: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), \"10 Friends\")))), React.createElement(Grid.Column, {\n      centered: true,\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, context.user && React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(PostForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Loading posts..\") : React.createElement(Transition.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, posts && posts.map(post => React.createElement(Grid.Column, {\n      key: post.id,\n      style: {\n        marginBottom: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(PostCard, {\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }))))))));\n  }\n\n  return postMarkup;\n}\n\nconst LOGIN_USER = gql(_templateObject());\nconst SUBMIT_COMMENT_MUTATION = gql(_templateObject2());\nconst FETCH_POST_QUERY = gql(_templateObject3());\nconst FETCH_USER_QUERY = gql(_templateObject4());\nexport default Profile;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client/src/pages/profile.js"],"names":["React","useContext","useState","useRef","gql","useQuery","useMutation","moment","Button","Card","Form","Grid","Image","Icon","Label","Menu","Segment","Transition","AuthContext","useForm","LikeButton","DeleteButton","PostCard","PostForm","MyPopup","Profile","props","context","username","user","FETCH_USER_QUERY","variables","fetchPolicy","loading","posts","data","getUserPosts","deletePostCallback","history","push","postMarkup","id","body","createdAt","comments","likes","likeCount","commentCount","map","post","marginBottom","LOGIN_USER","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label,\n  Menu, \n  Segment,\n  Transition\n} from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport MyPopup from '../util/MyPopup';\n\nfunction Profile(props) {\n\n  const context = useContext(AuthContext);\n\n  /*\n  let postId = null\n  console.log(\"=======1.0======\");\n  if (context.user===null)\n  {\n      console.log(\"No user\");\n      //postId = \"5fe723cc2dd0c558e547ea89\";\n      //postId = \"5fdf32d0d064dd1689ac3b8c\";\n\n      postId = \"5fe40df82dd0c558e547ea88\";      \n      //post id is postid, but it is not the user id\n      console.log(postId);\n  }\n  else\n  {\n    console.log(\"=======1.0.1.1=====\");\n    console.log(context.user.id);\n    postId = context.user.id;\n    username = context.user.username;\n    console.log(username); \n  }\n  console.log(\"=======1.0.1=====\");\n\n  //*/\n\n  const username = context.user.username;\n\n\n  const {\n    loading,\n    data: { getUserPosts: posts }\n  } = useQuery(FETCH_USER_QUERY, \n  {\n    variables: {\n      username\n    },\n  },\n  { fetchPolicy: !username ? \"store-only\" : \"store-or-network\" }\n\n  );\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n\n\n\n  let postMarkup;\n  if (!posts)\n  {\n    postMarkup = <p>Loading post..</p>;\n  }\n  else \n  {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount\n    } = posts;\n\n    postMarkup = (\n      <div>\n        {username ? \n          (\n          <h1>You are not logged in...</h1>\n          ) \n          : \n          (\n          <Grid centered columns={2}>\n            <Grid.Column centered width={10}>\n              <Card>\n                <Image src='https://react.semantic-ui.com/images/avatar/large/daniel.jpg' wrapped ui={false} />\n                <Card.Content>\n                  <Card.Header>Daniel</Card.Header>\n                  <Card.Meta>Joined in 2016</Card.Meta>\n                  <Card.Description>\n                    Daniel is a comedian living in Nashville.\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                  <a>\n                    <Icon name='user' />\n                    10 Friends\n                  </a>\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n            <Grid.Column centered width={10}>\n              <Grid.Row>\n              {context.user && (\n                <Grid.Column>\n                    <PostForm />\n                  </Grid.Column>\n                )}\n                {\n                  loading ? \n                  (\n                  <h1>Loading posts..</h1>\n                  ) \n                  : \n                  (\n                  <Transition.Group>\n                    {posts &&\n                      posts.map((post) => (\n                        <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                          <PostCard post={post} />\n                        </Grid.Column>\n                      ))}\n                  </Transition.Group>\n                  )\n                }\n              </Grid.Row>\n            </Grid.Column>\n          </Grid>\n          )\n          }\n      </div>\n    );\n  }\n  return postMarkup;\n\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nconst FETCH_USER_QUERY = gql`\n  query($username: String!) {\n    getUserPosts(username: $username) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}