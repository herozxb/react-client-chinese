{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/empzxb/Documents/webApp/app/react-client-chinese/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/empzxb/Documents/webApp/app/react-client-chinese/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client-chinese/src/components/DeleteButton.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\\n    deleteComment(postId: $postId, commentId: $commentId) {\\n      id\\n      comments {\\n        id\\n        username\\n        createdAt\\n        body\\n      }\\n      commentCount\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation deletePost($postId: ID!) {\\n    deletePost(postId: $postId)\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport MyPopup from '../util/MyPopup';\n\nfunction DeleteButton({\n  postId,\n  commentId,\n  callback,\n  area\n}) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        confirmOpen = _useState2[0],\n        setConfirmOpen = _useState2[1];\n\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n  const _useMutation = useMutation(mutation, {\n    update(proxy) {\n      setConfirmOpen(false);\n\n      if (!commentId) {\n        const data = proxy.readQuery({\n          query: FETCH_AREA_QUERY,\n          variables: {\n            thoughtArea: area\n          }\n        });\n        data.getAreaPosts = data.getAreaPosts.filter(p => p.id !== postId);\n        proxy.writeQuery({\n          query: FETCH_AREA_QUERY,\n          variables: {\n            thoughtArea: area\n          },\n          data\n        });\n      }\n\n      if (callback) callback();\n    },\n\n    variables: {\n      postId,\n      commentId\n    }\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        deletePostOrMutation = _useMutation2[0];\n\n  return React.createElement(React.Fragment, null, React.createElement(MyPopup, {\n    content: commentId ? 'Delete comment' : 'Delete post',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Button, {\n    as: \"div\",\n    color: \"red\",\n    floated: \"right\",\n    onClick: () => setConfirmOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"trash\",\n    style: {\n      margin: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))), React.createElement(Confirm, {\n    open: confirmOpen,\n    onCancel: () => setConfirmOpen(false),\n    onConfirm: deletePostOrMutation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n}\n\nconst DELETE_POST_MUTATION = gql(_templateObject());\nconst DELETE_COMMENT_MUTATION = gql(_templateObject2());\nexport default DeleteButton;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client-chinese/src/components/DeleteButton.js"],"names":["React","useState","gql","useMutation","Button","Confirm","Icon","FETCH_POSTS_QUERY","MyPopup","DeleteButton","postId","commentId","callback","area","confirmOpen","setConfirmOpen","mutation","DELETE_COMMENT_MUTATION","DELETE_POST_MUTATION","update","proxy","data","readQuery","query","FETCH_AREA_QUERY","variables","thoughtArea","getAreaPosts","filter","p","id","writeQuery","deletePostOrMutation","margin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,IAA1B,QAAsC,mBAAtC;AAEA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,OAAOC,OAAP,MAAoB,iBAApB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,SAAV;AAAqBC,EAAAA,QAArB;AAA+BC,EAAAA;AAA/B,CAAtB,EAA6D;AAAA,oBACrBZ,QAAQ,CAAC,KAAD,CADa;AAAA;AAAA,QACpDa,WADoD;AAAA,QACvCC,cADuC;;AAG3D,QAAMC,QAAQ,GAAGL,SAAS,GAAGM,uBAAH,GAA6BC,oBAAvD;;AAH2D,uBAK5Bf,WAAW,CAACa,QAAD,EAAW;AACnDG,IAAAA,MAAM,CAACC,KAAD,EAAQ;AACZL,MAAAA,cAAc,CAAC,KAAD,CAAd;;AACA,UAAI,CAACJ,SAAL,EAAgB;AACd,cAAMU,IAAI,GAAGD,KAAK,CAACE,SAAN,CAAgB;AAC3BC,UAAAA,KAAK,EAAEC,gBADoB;AAE3BC,UAAAA,SAAS,EAAC;AAAEC,YAAAA,WAAW,EAAGb;AAAhB;AAFiB,SAAhB,CAAb;AAIAQ,QAAAA,IAAI,CAACM,YAAL,GAAoBN,IAAI,CAACM,YAAL,CAAkBC,MAAlB,CAA0BC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASpB,MAAzC,CAApB;AACAU,QAAAA,KAAK,CAACW,UAAN,CAAiB;AACfR,UAAAA,KAAK,EAAEC,gBADQ;AAEfC,UAAAA,SAAS,EAAC;AAAEC,YAAAA,WAAW,EAAGb;AAAhB,WAFK;AAGfQ,UAAAA;AAHe,SAAjB;AAID;;AACD,UAAIT,QAAJ,EAAcA,QAAQ;AACvB,KAfkD;;AAgBnDa,IAAAA,SAAS,EAAE;AACTf,MAAAA,MADS;AAETC,MAAAA;AAFS;AAhBwC,GAAX,CALiB;AAAA;AAAA,QAKpDqB,oBALoD;;AA0B3D,SACE,0CACE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAErB,SAAS,GAAG,gBAAH,GAAsB,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAC,KADL;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,OAAO,EAAC,OAHV;AAIE,IAAA,OAAO,EAAE,MAAMI,cAAc,CAAC,IAAD,CAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,KAAK,EAAE;AAAEkB,MAAAA,MAAM,EAAE;AAAV,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,CADF,EAWE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAEnB,WADR;AAEE,IAAA,QAAQ,EAAE,MAAMC,cAAc,CAAC,KAAD,CAFhC;AAGE,IAAA,SAAS,EAAEiB,oBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAmBD;;AAED,MAAMd,oBAAoB,GAAGhB,GAAH,mBAA1B;AAMA,MAAMe,uBAAuB,GAAGf,GAAH,oBAA7B;AAeA,eAAeO,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\n\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport MyPopup from '../util/MyPopup';\n\nfunction DeleteButton({ postId, commentId, callback, area }) {\n  const [confirmOpen, setConfirmOpen] = useState(false);\n\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n  const [deletePostOrMutation] = useMutation(mutation, {\n    update(proxy) {\n      setConfirmOpen(false);\n      if (!commentId) {\n        const data = proxy.readQuery({\n          query: FETCH_AREA_QUERY,\n          variables:{ thoughtArea : area}\n        });\n        data.getAreaPosts = data.getAreaPosts.filter((p) => p.id !== postId);\n        proxy.writeQuery({ \n          query: FETCH_AREA_QUERY,\n          variables:{ thoughtArea : area}, \n          data });\n      }\n      if (callback) callback();\n    },\n    variables: {\n      postId,\n      commentId\n    }\n  });\n  return (\n    <>\n      <MyPopup content={commentId ? 'Delete comment' : 'Delete post'}>\n        <Button\n          as=\"div\"\n          color=\"red\"\n          floated=\"right\"\n          onClick={() => setConfirmOpen(true)}\n        >\n          <Icon name=\"trash\" style={{ margin: 0 }} />\n        </Button>\n      </MyPopup>\n      <Confirm\n        open={confirmOpen}\n        onCancel={() => setConfirmOpen(false)}\n        onConfirm={deletePostOrMutation}\n      />\n    </>\n  );\n}\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      id\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default DeleteButton;\n"]},"metadata":{},"sourceType":"module"}