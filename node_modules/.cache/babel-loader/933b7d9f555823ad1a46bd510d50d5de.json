{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client/src/components/PostForm.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation createAreaPost($body: String!,$thoughtArea: String!) {\\n    createAreaPost(body: $body, thoughtArea: $thoughtArea) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likes {\\n        id\\n        username\\n        createdAt\\n      }\\n      likeCount\\n      comments {\\n        id\\n        body\\n        username\\n        createdAt\\n      }\\n      commentCount\\n      thoughtArea\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation createPost($body: String!) {\\n    createPost(body: $body) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likes {\\n        id\\n        username\\n        createdAt\\n      }\\n      likeCount\\n      comments {\\n        id\\n        body\\n        username\\n        createdAt\\n      }\\n      commentCount\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Form, Divider, Header, Icon, Grid, Dropdown } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY, FETCH_AREA_QUERY } from '../util/graphql';\n\nfunction PostForm({\n  area,\n  onAreaChange\n}) {\n  console.log(\"=========function_iput===========\");\n  console.log(area); //const { values, onChange, onSubmit } = useForm(createPostCallback, {\n  //  body: ''\n  //});\n  //const [values, setValues] = useState('');\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        texts = _useState2[0],\n        setTexts = _useState2[1];\n\n  const _useState3 = useState('default'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        thoughtArea = _useState4[0],\n        setThoughtArea = _useState4[1]; //const [state,setState] = useState({options});\n  //const [currentValues,setCurrentValues] = useState([]);\n\n\n  const on_change_for_text = event => {\n    //setValues({ ...values, [event.target.name]: event.target.value });\n    setTexts(_objectSpread({}, texts, {\n      [event.target.name]: event.target.value\n    }));\n    console.log(\"=========for_input_text========\"); //console.log(event.target.name);\n    //console.log(event.target.value);\n    //console.log({ ...texts, [event.target.name]: event.target.value });\n    //console.log(texts);\n\n    setThoughtArea(_objectSpread({}, thoughtArea, {\n      [\"thoughtArea\"]: area\n    }));\n    console.log(_objectSpread({}, thoughtArea, {\n      [\"thoughtArea\"]: area\n    }));\n  };\n\n  const on_change_for_thought_area = (e, {\n    value\n  }) => {\n    //console.log(value);\n    setCurrentValues(value);\n  }; //  const onSubmit = (event) => {\n  //    event.preventDefault();\n  //console.log(\"=========1.0========\");\n  //    createPost();\n  //createPost3({\n  //  variables: {thoughtArea3},\n  //});\n  //  };\n\n  /*\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = '';\n    }\n  });\n  //*/\n  //  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION);\n\n\n  const _useMutation = useMutation(CREATE_AREA_POST_MUTATION, {\n    variables: {\n      body: texts.body,\n      thoughtArea: thoughtArea.thoughtArea\n    },\n\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_AREA_QUERY,\n        variables: {\n          thoughtArea: thoughtArea.thoughtArea\n        }\n      }); //console.log(\"=========1========\");\n      //console.log(data);\n\n      data.getAreaPosts = [result.data.createAreaPost, ...data.getAreaPosts]; //console.log(\"=========2========\");\n      //console.log(data);\n\n      proxy.writeQuery({\n        query: FETCH_AREA_QUERY,\n        variables: {\n          thoughtArea: thoughtArea.thoughtArea\n        },\n        data\n      });\n      texts.body = '';\n    }\n\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        createAreaPost = _useMutation2[0],\n        error = _useMutation2[1].error;\n\n  const submit = event => {\n    event.preventDefault(); //console.log(\"=========1.0.0========\");\n    //console.log(texts,thoughtArea);\n    //createPost3({\n    //  variables: {thoughtArea3},\n    //});\n    //addTodo({ variables: { type: input.value } });\n    //updateTodo({ variables: { id, type: input.value } });\n    //createAreaPost({ variables: { body: texts.body, thoughtArea: thoughtArea.thoughtArea } });\n\n    createAreaPost();\n  }; //  function createPostCallback() {\n  //console.log(\"=========1.0.1.1========\");\n  //    createPost();\n  //createPost3({\n  //  variables: {thoughtArea3},\n  //});\n  //  }\n  // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {\n    console.log(\"====useEffect1.0======\");\n    console.log(area);\n  }); //const handleAddition = (e, { value }) => {\n  //  console.log(\"=========1.0==========\");   \n  //  console.log(value);\n  //setState((prevState) => ({\n  //  options: [{ text: value, value }, ...prevState.options],\n  //}))\n  //}\n\n  return React.createElement(React.Fragment, null, React.createElement(Form, {\n    onSubmit: submit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    horizontal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"comments\",\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), \"\\u53D1\\u8868 \\u4F60\\u7684 \\u601D\\u60F3\")), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(Form.Input, {\n    placeholder: \"\\u4E16\\u754C \\u4F60\\u597D!\",\n    name: \"body\",\n    onChange: on_change_for_text,\n    value: texts.body,\n    error: error ? true : false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    color: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"\\u53D1\\u5E03\"))), error && React.createElement(\"div\", {\n    className: \"ui error message\",\n    style: {\n      marginBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, error.graphQLErrors[0].message))));\n}\n\nconst CREATE_POST_MUTATION = gql(_templateObject());\nconst CREATE_AREA_POST_MUTATION = gql(_templateObject2());\nexport default PostForm;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client/src/components/PostForm.js"],"names":["React","useState","useEffect","Button","Form","Divider","Header","Icon","Grid","Dropdown","gql","useMutation","useForm","FETCH_POSTS_QUERY","FETCH_AREA_QUERY","PostForm","area","onAreaChange","console","log","texts","setTexts","thoughtArea","setThoughtArea","on_change_for_text","event","target","name","value","on_change_for_thought_area","e","setCurrentValues","CREATE_AREA_POST_MUTATION","variables","body","update","proxy","result","data","readQuery","query","getAreaPosts","createAreaPost","writeQuery","error","submit","preventDefault","marginBottom","graphQLErrors","message","CREATE_POST_MUTATION"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport { Button, Form, Divider, Header, Icon, Grid, Dropdown } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY, FETCH_AREA_QUERY } from '../util/graphql';\n\n\nfunction PostForm( { area, onAreaChange } ) {\n\n\n  console.log(\"=========function_iput===========\");\n  console.log(area);\n  //const { values, onChange, onSubmit } = useForm(createPostCallback, {\n  //  body: ''\n  //});\n\n  //const [values, setValues] = useState('');\n  const [texts, setTexts] = useState('');\n  const [thoughtArea, setThoughtArea] = useState('default');\n  //const [state,setState] = useState({options});\n  //const [currentValues,setCurrentValues] = useState([]);\n\n  const on_change_for_text = (event) => {\n    //setValues({ ...values, [event.target.name]: event.target.value });\n    setTexts({ ...texts, [event.target.name]: event.target.value });\n    console.log(\"=========for_input_text========\");\n    //console.log(event.target.name);\n    //console.log(event.target.value);\n    //console.log({ ...texts, [event.target.name]: event.target.value });\n    //console.log(texts);\n\n    setThoughtArea({ ...thoughtArea, [\"thoughtArea\"]: area });\n    console.log({ ...thoughtArea, [\"thoughtArea\"]: area });\n  };\n\n  const on_change_for_thought_area = (e, { value }) => \n  {\n    //console.log(value);\n    setCurrentValues(value)\n  };\n\n//  const onSubmit = (event) => {\n//    event.preventDefault();\n    //console.log(\"=========1.0========\");\n//    createPost();\n    //createPost3({\n    //  variables: {thoughtArea3},\n    //});\n//  };\n\n  /*\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = '';\n    }\n  });\n//*/\n\n//  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION);\n\n\n  const [createAreaPost, { error }] = useMutation(CREATE_AREA_POST_MUTATION,{\n    variables: { body: texts.body, thoughtArea: thoughtArea.thoughtArea },\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_AREA_QUERY,\n        variables:{ thoughtArea : thoughtArea.thoughtArea}\n      });\n      //console.log(\"=========1========\");\n      //console.log(data);\n      data.getAreaPosts = [result.data.createAreaPost, ...data.getAreaPosts];\n      //console.log(\"=========2========\");\n      //console.log(data);\n      proxy.writeQuery({ \n        query: FETCH_AREA_QUERY, \n        variables:{ thoughtArea : thoughtArea.thoughtArea}, \n        data \n      });\n      texts.body = '';\n    }\n  });\n\n  const submit = (event) => {\n\n    event.preventDefault();\n    //console.log(\"=========1.0.0========\");\n    //console.log(texts,thoughtArea);\n    //createPost3({\n    //  variables: {thoughtArea3},\n    //});\n    //addTodo({ variables: { type: input.value } });\n    //updateTodo({ variables: { id, type: input.value } });\n    //createAreaPost({ variables: { body: texts.body, thoughtArea: thoughtArea.thoughtArea } });\n    createAreaPost();\n\n  };\n\n//  function createPostCallback() {\n    //console.log(\"=========1.0.1.1========\");\n//    createPost();\n    //createPost3({\n    //  variables: {thoughtArea3},\n    //});\n//  }\n\n\n\n    // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n      console.log(\"====useEffect1.0======\");\n      console.log(area);\n  });\n\n\n  //const handleAddition = (e, { value }) => {\n\n  //  console.log(\"=========1.0==========\");   \n  //  console.log(value);\n    //setState((prevState) => ({\n    //  options: [{ text: value, value }, ...prevState.options],\n    //}))\n  //}\n\n\n  return (\n    <>\n      <Form onSubmit={submit}>\n          <Divider horizontal>\n            <Header as='h3'>\n              <Icon name='comments' color=\"blue\"/>\n                发表 你的 思想\n            </Header>\n          </Divider>\n        <Form.Field>\n          <Form.Input\n            placeholder=\"世界 你好!\"\n            name=\"body\"\n            onChange={on_change_for_text}\n            value={texts.body}\n            error={error ? true : false}\n          />\n          <Button type=\"submit\" color=\"blue\">\n            发布\n          </Button>\n        </Form.Field>\n      </Form>\n      {error && (\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\n          <ul className=\"list\">\n            <li>{error.graphQLErrors[0].message}</li>\n          </ul>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id\n      body\n      createdAt\n      username\n      likes {\n        id\n        username\n        createdAt\n      }\n      likeCount\n      comments {\n        id\n        body\n        username\n        createdAt\n      }\n      commentCount\n    }\n  }\n`;\n\nconst CREATE_AREA_POST_MUTATION = gql`\n  mutation createAreaPost($body: String!,$thoughtArea: String!) {\n    createAreaPost(body: $body, thoughtArea: $thoughtArea) {\n      id\n      body\n      createdAt\n      username\n      likes {\n        id\n        username\n        createdAt\n      }\n      likeCount\n      comments {\n        id\n        body\n        username\n        createdAt\n      }\n      commentCount\n      thoughtArea\n    }\n  }\n`;\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}