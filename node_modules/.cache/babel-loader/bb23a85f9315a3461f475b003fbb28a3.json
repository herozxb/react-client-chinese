{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/empzxb/Documents/webApp/app/react-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/empzxb/Documents/webApp/app/react-client/src/pages/profile.js\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  query($username: String!) {\\n    getUserPosts(username: $username) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likeCount\\n      likes {\\n        username\\n      }\\n      commentCount\\n      comments {\\n        id\\n        username\\n        createdAt\\n        body\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  query($postId: ID!) {\\n    getPost(postId: $postId) {\\n      id\\n      body\\n      createdAt\\n      username\\n      likeCount\\n      likes {\\n        username\\n      }\\n      commentCount\\n      comments {\\n        id\\n        username\\n        createdAt\\n        body\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation($postId: String!, $body: String!) {\\n    createComment(postId: $postId, body: $body) {\\n      id\\n      comments {\\n        id\\n        body\\n        createdAt\\n        username\\n      }\\n      commentCount\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation login($username: String!, $password: String!) {\\n    login(username: $username, password: $password) {\\n      id\\n      email\\n      username\\n      createdAt\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState, fetchPolicy } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport { Button, Card, Form, Grid, Image, Icon, Label, Menu, Segment, Transition } from 'semantic-ui-react';\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport MyPopup from '../util/MyPopup';\n\nfunction Profile(props) {\n  const context = useContext(AuthContext);\n  var username = null;\n  var nologin = null;\n  var createdAt = null;\n\n  if (context.user === null) {\n    username = \"default\";\n    nologin = true;\n  } else {\n    username = context.user.username;\n    nologin = false;\n    createdAt = context.user.createdAt;\n  }\n\n  const _useQuery = useQuery(FETCH_USER_QUERY, {\n    variables: {\n      username\n    }\n  }),\n        loading = _useQuery.loading,\n        posts = _useQuery.data.getUserPosts;\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  state = {\n    activeItem: 'home'\n  };\n\n  const handleItemClick = (e, {\n    name\n  }) => setState({\n    activeItem: name\n  });\n\n  const _state = state,\n        activeItem = _state.activeItem;\n  let postMarkup;\n\n  if (!posts) {\n    postMarkup = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Loading post..\");\n  } else {\n    const id = posts.id,\n          body = posts.body,\n          createdAt = posts.createdAt,\n          username = posts.username,\n          comments = posts.comments,\n          likes = posts.likes,\n          likeCount = posts.likeCount,\n          commentCount = posts.commentCount;\n    postMarkup = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, nologin ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"You are not logged in...\") : React.createElement(Grid, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      centered: true,\n      width: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      pointing: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Menu.Item, {\n      name: \"home\",\n      active: activeItem === 'home',\n      onClick: handleItemClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Menu.Item, {\n      name: \"messages\",\n      active: activeItem === 'messages',\n      onClick: handleItemClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Menu.Item, {\n      name: \"friends\",\n      active: activeItem === 'friends',\n      onClick: handleItemClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(Menu.Menu, {\n      position: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Menu.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Input, {\n      icon: \"search\",\n      placeholder: \"Search...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })))), React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"/images/wireframe/paragraph.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: \"https://react.semantic-ui.com/images/avatar/large/daniel.jpg\",\n      wrapped: true,\n      ui: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, context.user.username), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, moment(context.user.createdAt).fromNow(true)), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Daniel is a comedian living in Nashville.\")), React.createElement(Card.Content, {\n      extra: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), \"10 Friends\"))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, context.user && React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(PostForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Loading posts..\") : React.createElement(Transition.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, posts && posts.map(post => React.createElement(Grid.Column, {\n      key: post.id,\n      style: {\n        marginBottom: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(PostCard, {\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }))))))));\n  }\n\n  return postMarkup;\n}\n\nconst LOGIN_USER = gql(_templateObject());\nconst SUBMIT_COMMENT_MUTATION = gql(_templateObject2());\nconst FETCH_POST_QUERY = gql(_templateObject3());\nconst FETCH_USER_QUERY = gql(_templateObject4());\nexport default Profile;","map":{"version":3,"sources":["/Users/empzxb/Documents/webApp/app/react-client/src/pages/profile.js"],"names":["React","useContext","useState","fetchPolicy","gql","useQuery","useMutation","moment","Button","Card","Form","Grid","Image","Icon","Label","Menu","Segment","Transition","AuthContext","useForm","LikeButton","DeleteButton","PostCard","PostForm","MyPopup","Profile","props","context","username","nologin","createdAt","user","FETCH_USER_QUERY","variables","loading","posts","data","getUserPosts","deletePostCallback","history","push","state","setState","activeItem","handleItemClick","e","name","postMarkup","id","body","comments","likes","likeCount","commentCount","fromNow","map","post","marginBottom","LOGIN_USER","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY"],"mappings":"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","sourcesContent":["import React, { useContext, useState, fetchPolicy } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label,\n  Menu, \n  Segment,\n  Transition\n} from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport MyPopup from '../util/MyPopup';\n\nfunction Profile(props) {\n\n  const context = useContext(AuthContext);\n  var username = null;\n  var nologin = null;\n  var createdAt = null;\n  if (context.user===null)\n  {\n    username = \"default\";\n    nologin = true;\n\n  }\n  else\n  {\n    username = context.user.username;\n    nologin = false;\n    createdAt = context.user.createdAt;\n  }\n\n  const {\n    loading,\n    data: { getUserPosts: posts }\n  } = useQuery(FETCH_USER_QUERY, \n  {\n    variables: {\n      username\n    },\n  }\n  );\n\n  function deletePostCallback() {\n    props.history.push('/');\n  }\n\n  let [state,setState] = useState(\"\");\n\n  state = { activeItem: 'home' };\n\n  const handleItemClick = (e, { name }) => setState({ activeItem: name });\n\n  const { activeItem } = state;\n\n\n\n\n  let postMarkup;\n  if (!posts)\n  {\n    postMarkup = <p>Loading post..</p>;\n  }\n  else \n  {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount\n    } = posts;\n\n    postMarkup = (\n      <div>\n        { nologin ? \n          (\n          <h1>You are not logged in...</h1>\n          ) \n          : \n          (\n          <Grid centered>\n            <Grid.Column centered width={20}>\n              <Menu pointing>\n                <Menu.Item\n                  name='home'\n                  active={activeItem === 'home'}\n                  onClick={handleItemClick}\n                />\n                <Menu.Item\n                  name='messages'\n                  active={activeItem === 'messages'}\n                  onClick={handleItemClick}\n                />\n                <Menu.Item\n                  name='friends'\n                  active={activeItem === 'friends'}\n                  onClick={handleItemClick}\n                />\n                <Menu.Menu position='right'>\n                  <Menu.Item>\n                    <Input icon='search' placeholder='Search...' />\n                  </Menu.Item>\n                </Menu.Menu>\n              </Menu>\n\n              <Segment>\n                <img src='/images/wireframe/paragraph.png' />\n              </Segment>\n              <Card>\n                <Image src='https://react.semantic-ui.com/images/avatar/large/daniel.jpg' wrapped ui={false} />\n                <Card.Content>\n                  <Card.Header>{context.user.username}</Card.Header>\n                  <Card.Meta>{moment(context.user.createdAt).fromNow(true)}</Card.Meta>\n                  <Card.Description>\n                    Daniel is a comedian living in Nashville.\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                  <a>\n                    <Icon name='user' />\n                    10 Friends\n                  </a>\n                </Card.Content>\n              </Card>\n              <Grid.Row>\n              {context.user && (\n                <Grid.Column>\n                    <PostForm />\n                  </Grid.Column>\n                )}\n                {\n                  loading ? \n                  (\n                  <h1>Loading posts..</h1>\n                  ) \n                  : \n                  (\n                  <Transition.Group>\n                    {posts &&\n                      posts.map((post) => (\n                        <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                          <PostCard post={post} />\n                        </Grid.Column>\n                      ))}\n                  </Transition.Group>\n                  )\n                }\n              </Grid.Row>\n            </Grid.Column>\n          </Grid>\n          )\n          }\n      </div>\n    );\n  }\n  return postMarkup;\n\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nconst FETCH_USER_QUERY = gql`\n  query($username: String!) {\n    getUserPosts(username: $username) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}